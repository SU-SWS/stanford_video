<?php
/**
 * @file
 * Code for the Stanford Video feature.
 */

include_once 'stanford_video.features.inc';

/**
 * Implements hook_form_FORM_ID_alter().
 */
function stanford_video_form_jw_player_settings_form_alter(&$form, &$form_state, $form_id) {
   $provider_options = array();
   $providers = stanford_video_provider_load();
   foreach($providers as $name => $provider) {
     $provider_options[$name] = $name;
   }
   
   $form['jw_player_active_providers'] = array(
     '#type' => 'checkboxes',
     '#title' => t('Active providers'),
     '#options' => $provider_options,
     '#default_value' => variable_get('jw_player_active_providers', array()),
     '#description' => 'Choose the providers you\'d like your site to support.',
   );
 
   foreach ($providers as $name => $provider) {
     $fields = $provider->global_settings();
     if (!empty($fields)) {
       $form[$name.'_global_settings'] = array(
         '#type' => 'fieldset',
         '#title' => t('%name Settings', array('%name' => $name)),
       );
       foreach ($fields as $field_name => $field) {
         $key = 'jw_player_'.$name.'_'.$field_name;
         $field['#default_value'] = variable_get($key, '');
         $form[$name.'_global_settings'][$key] = $field;
       }
     }
   }
 
}

/**
 * Implements hook_ctools_plugin_type().
 */
function stanford_video_ctools_plugin_type() {
  return array(
    'video_provider' => array(
      'cache' => FALSE,
      'use hooks' => TRUE,
      'classes' => array(),
    ),
  );
}

/**
 * Implements hook_ctools_plugin_directory().
 */
function stanford_video_ctools_plugin_directory($module, $type) {
  if ($type =='video_provider') {
    return 'plugins/video_provider';
  }
}

/**
 * Load the given provider(s).
 * @param string $name
 * @return array
 */
function stanford_video_provider_load($name = NULL) {
  ctools_include('plugins');
  if ($name) {
    $providers = array(ctools_get_plugins('stanford_video', 'video_provider', $name));
  } else {
    $providers = ctools_get_plugins('stanford_video', 'video_provider');
  }
  $handlers = array();
  foreach ($providers as $plugin) {
    $class = ctools_plugin_get_class($plugin, 'provider');
    if ($class) {
      $handlers[$plugin['name']] = new $class();
    }
  }
  return $handlers;
}

/**
 * Implements hook_theme().
 */
function stanford_video_theme() {
  return array(
    'jw_player' => array(
      'variables' => array(
        'file_object' => NULL,
        'sources' => '',
        'streamer' => '',
        'preset' => '',
        'image' => '',
        'options' => array(),
        'entity' => NULL,
        'entity_type' => '',
      ),
      'template' => 'theme/jw_player',
    ),
  );
}

/**
 * Implements hook_field_formatter_info_alter().
 */
function stanford_video_field_formatter_info_alter(&$info) {
  if (isset($info['jw_player'])) {
    $info['jw_player']['field types'][] = 'link_field';
  }
}

/**
 * Implements hook_field_formatter_view().
 */
function stanford_video_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();

  if ($display['type'] == 'jw_player') {
    // Process files for the theme function.
    $files = array();
    foreach ($items as $delta => $item) {
      $files[$delta] = (object) $item;
    }
    foreach ($files as $delta => $file) {
      $element[$delta] = array(
        '#theme' => 'stanford_video',
        '#preset' => $display['settings']['jwplayer_preset'],
        '#entity' => $entity,
        '#entity_type' => $entity_type,
      );
      if (isset($file->fid)) {
        $element[$delta]['#file_object'] = $file;
      } else {
        
        $url = $file->url;
        $providers = stanford_video_provider_load();
        foreach ($providers as $provider) {
          // TODO: respect active provider setting.
          $provider->process_url($url, $element[$delta]);
        }
        
        $element[$delta]['#sources'] = array(
          array(
            'file_path' => $url,
            'file_mime' => 'video/mp4',
          ),
        );
      }
    }
  }
  
  return $element;
}